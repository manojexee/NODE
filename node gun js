const express = require("express");
const { createServer } = require("node:http");
const { Server } = require("socket.io");
const path = require("path");

const app = express();
const server = createServer(app);
const io = new Server(server);

// Serve static files (frontend)
app.use(express.static(path.join(__dirname, "public")));

// Data structures to store players and leaderboard
let players = {};
let leaderboard = [];

// Handle new socket connections
io.on("connection", (socket) => {
  console.log(`Player connected: ${socket.id}`);

  // Add new player to players object
  players[socket.id] = {
    id: socket.id,
    username: `Player_${Math.floor(Math.random() * 1000)}`,
    score: 0,
    x: Math.random() * 800, // Random initial position
    y: Math.random() * 600,
  };

  // Send initial player and leaderboard data
  socket.emit("initialize", {
    players,
    leaderboard,
  });

  // Broadcast new player to others
  socket.broadcast.emit("newPlayer", players[socket.id]);

  // Handle player movement
  socket.on("move", (movementData) => {
    if (players[socket.id]) {
      players[socket.id].x += movementData.x;
      players[socket.id].y += movementData.y;
      io.emit("playerMoved", players[socket.id]);
    }
  });

  // Handle shooting event
  socket.on("shoot", (bulletData) => {
    io.emit("bulletFired", {
      ...bulletData,
      shooterId: socket.id,
    });
  });

  // Handle player scoring
  socket.on("score", () => {
    if (players[socket.id]) {
      players[socket.id].score += 10;
      updateLeaderboard();
      io.emit("updateLeaderboard", leaderboard);
    }
  });

  // Handle player disconnect
  socket.on("disconnect", () => {
    console.log(`Player disconnected: ${socket.id}`);
    delete players[socket.id];
    io.emit("playerDisconnected", socket.id);
  });
});

// Update leaderboard
function updateLeaderboard() {
  leaderboard = Object.values(players)
    .sort((a, b) => b.score - a.score)
    .slice(0, 10);
}

// Serve index.html for all routes
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// Start the server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
